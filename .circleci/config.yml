# geniushub-client - Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1


aliases:
  - &testbed_environment
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/working_directory
    environment:
      TEST_RESULTS: /tmp/workspace/test-results

  - &restore_cache
      restore_cache:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}

  - &save_cache
      save_cache:
        key: v4-dependencies-{{ checksum "requirements.txt" }}
        paths:
          - ./venv

  - &attach_workspace
      attach_workspace:
        at: /tmp/workspace

  - &persist_to_workspace
      persist_to_workspace:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}
        root: /tmp/workspace
        paths:
          - test-results

  - &store_artifacts
      store_artifacts:
        path: /tmp/workspace/test-results
        destination: test_results

  - &refresh_cache
      - checkout
      - *restore_cache
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip  # setuptools wheel
            pip install -r requirements.txt
      - *save_cache


commands:
  normalize_json:
    description: "convert files to a standard format"
    parameters:
      test_type:
        type: string
      file_type:
        type: string
    steps:
      - run:
          name: convert a single file
          no_output_timeout: 60
          command: |
            . venv/bin/activate
            cat ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.file_type >>.json | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.file_type >>.json

  get_v1_curl:
    description: "get v1 response via cURL"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v1 response via cURL
          no_output_timeout: 330
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            curl -X GET https://my.geniushub.co.uk/v1/<< parameters.test_type >> -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/curl.json

  get_v1_app:
    description: "get v1 response via app"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v1 response via app
          no_output_timeout: 330
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            . venv/bin/activate

            python ghclient.py ${HUB_TOKEN} << parameters.test_type >> -v | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v1.json

  get_v3_app:
    description: "get v3 response via app"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v3 response via app
          no_output_timeout: 120
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            . venv/bin/activate

            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} << parameters.test_type >> -v | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v3.json

  diff_files:
    description: "compare outputs"
    parameters:
      test_type:
        type: string
        default: "issues"
      api_ver:
        type: string
        default: "issues"
    steps:
      - run:
          name: diff files
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.api_ver >>.json | \
              tee -a ${TEST_RESULTS}/<< parameters.test_type >>/results.txt

      - run:
          name: display differences
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.api_ver >>.json | colordiff


jobs:
  make_testbed:
    <<: *testbed_environment
    steps: *refresh_cache

  get_issues:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v1_curl:
          test_type: "issues"
      - get_v1_app:
          test_type: "issues"
      - get_v3_app:
          test_type: "issues"

  get_devices:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v1_curl:
          test_type: "devices"
      - get_v1_app:
          test_type: "devices"
      - get_v3_app:
          test_type: "devices"

  get_zones:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v1_app:
          test_type: "zones"
      - get_v3_app:
          test_type: "zones"
      - get_v1_curl:
          test_type: "zones"

  diff_issues:
    <<: *testbed_environment
    steps:
      - diff_files:
          test_type: "issues"
          api_ver: "v1"
      - diff_files:
          test_type: "issues"
          api_ver: "v3"

  diff_devices:
    <<: *testbed_environment
    steps:
      - diff_files:
          test_type: "devices"
          api_ver: "v1"
      - diff_files:
          test_type: "devices"
          api_ver: "v3"

  diff_zones:
    <<: *testbed_environment
    steps:
      - diff_files:
          test_type: "zones"
          api_ver: "v1"
      - diff_files:
          test_type: "zones"
          api_ver: "v3"


workflows:
  version: 2.1
  test_outputs:
    jobs:
      - make_testbed

      - get_zones:
          requires:
            - make_testbed
          pre-steps:
            - checkout
            - *restore_cache
            - *attach_workspace
          post-steps:
            - *persist_to_workspace

      - diff_zones:
          requires:
            - get_zones
          pre-steps:
            - *attach_workspace
          post-steps:
            - *store_artifacts

      - get_devices:
          requires:
            - make_testbed
          pre-steps:
            - checkout
            - *restore_cache
            - *attach_workspace
          post-steps:
            - normalize_json:
                test_type: "devices"
                file_type: "curl"
            - *persist_to_workspace

      - diff_devices:
          requires:
            - get_devices
          pre-steps:
            - *attach_workspace
          post-steps:
            - *store_artifacts

      - get_issues:
          requires:
            - make_testbed
            - diff_zones
          pre-steps:
            - checkout
            - *restore_cache
            - *attach_workspace
          post-steps:
            - normalize_json:
                test_type: "issues"
                file_type: "curl"
            - *persist_to_workspace

      - diff_issues:
          requires:
            - get_issues
          pre-steps:
            - *attach_workspace
          post-steps:
            - *store_artifacts
