# CircleCI 2.1 configuration file for https://github.com/zxdavb/geniushub-client
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.1


aliases:
  - &testbed_environment
    docker: # run the steps with Docker, see: https://circleci.com/docs/2.0/circleci-images/#python
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.7
    working_directory: ~/working_directory  # pwd is /home/circleci/working_directory
    environment:
      TEST_RESULTS: /tmp/workspace/test-results
      PYTHONPATH: /home/circleci/working_directory

  - &restore_cache
      - checkout
      - restore_cache:
          keys:
            - v9-dependencies-{{ checksum "requirements-dev.txt" }}

  - &save_cache
      save_cache:
        key: v9-dependencies-{{ checksum "requirements-dev.txt" }}
        paths:
          - ./venv

  - &attach_workspace
      attach_workspace:
        at: /tmp/workspace

  - &persist_to_workspace
      persist_to_workspace:
        keys:
          - v9-dependencies-{{ checksum "requirements-dev.txt" }}
        root: /tmp/workspace
        paths:
          - test-results

  - &store_artifacts
      store_artifacts:
        path: /tmp/workspace/test-results
        destination: test_results


commands:
  get_v1_curl:
    description: "get v1 response via cURL"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v1 response via cURL
          no_output_timeout: 330
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            curl -Ss -X GET https://my.geniushub.co.uk/v1/<< parameters.test_type >> -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 > output.json

            wc --words output.json

            cat output.json | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/curl.json

  get_v1_app:
    description: "get v1 response via app"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v1 response via app
          no_output_timeout: 330
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            . venv/bin/activate

            # if [ "<< parameters.test_type >>" == "zones" ]; then VERBOSE="-vv"; else VERBOSE="-v"; fi

            python ghclient.py ${HUB_TOKEN} << parameters.test_type >> -v > output.json

            wc --words output.json

            cat output.json | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v1.json

  get_v3_app:
    description: "get v3 response via app"
    parameters:
      test_type:
        type: string
        default: "issues"
    steps:
      - run:
          name: get v3 response via app
          no_output_timeout: 120
          command: |
            mkdir -p ${TEST_RESULTS}/<< parameters.test_type >>

            . venv/bin/activate

            # if [ "<< parameters.test_type >>" == "zones" ]; then VERBOSE="-vv"; else VERBOSE="-v"; fi

            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} << parameters.test_type >> -v | \
              python -c "import sys, json; print(json.dumps(json.load(sys.stdin, parse_float=lambda x: int(float(x))), indent=4, sort_keys=True))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v3.json

  diff_files:
    description: "compare outputs"
    parameters:
      test_type:
        type: string
        default: "issues"
      api_ver:
        type: string
        default: "issues"
    steps:
      - run:
          name: check differences
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/<< parameters.test_type >>/curl.json \
                     ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.api_ver >>.json | \
            tee -a   ${TEST_RESULTS}/<< parameters.test_type >>/results.txt

      - run:
          name: display differences (are different)
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff > /dev/null 2>&1
            wdiff ${TEST_RESULTS}/<< parameters.test_type >>/curl.json \
                  ${TEST_RESULTS}/<< parameters.test_type >>/<< parameters.api_ver >>.json | \
            colordiff


jobs:
  make_testbed:
    <<: *testbed_environment
    steps: 
      - checkout  # needed for: 'pip install -r requirements-dev.txt'
      - run:
          name: Install Requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip setuptools  # wheel
            pip install -r requirements-dev.txt
      - *save_cache


  test_issues:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v3_app:  {test_type: "issues"}
      - get_v1_curl: {test_type: "issues"}
      - diff_files:  {test_type: "issues", api_ver: "v3"}
      # - get_v1_app:  {test_type: "issues"}
      # - diff_files:  {test_type: "issues", api_ver: "v1"}

  test_devices:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v3_app:  {test_type: "devices"}
      - get_v1_curl: {test_type: "devices"}
      - diff_files:  {test_type: "devices", api_ver: "v3"}
      # - get_v1_app:  {test_type: "devices"}
      # - diff_files:  {test_type: "devices", api_ver: "v1"}

  test_zones:
    <<: *testbed_environment
    parallelism: 1
    steps:
      - get_v3_app:  {test_type: "zones"}
      - get_v1_curl: {test_type: "zones"}
      - diff_files:  {test_type: "zones", api_ver: "v3"}
      - get_v1_app:  {test_type: "zones"}
      - diff_files:  {test_type: "zones", api_ver: "v1"}

  check_build: 
    <<: *testbed_environment
    steps: 
      - run:
          name: Check formatting (black)
          command: |
            . venv/bin/activate
            # isort --check-only
            black --diff --check *.py
            black --diff --check geniushubclient


workflows:
  version: 2.1


  build: 
    jobs:
      - make_testbed

      - check_build:
          requires:
            - make_testbed
          pre-steps:
            - *restore_cache
            - *attach_workspace

  # unit_tests:
  #   jobs:
  #     - make_testbed

  #     - test_one:
  #         requires:
  #           - make_testbed
  #         pre-steps:
  #           - *restore_cache
  #           - *attach_workspace
  #         post-steps:
  #           - *persist_to_workspace
  #           - *store_artifacts

  system_tests:
    jobs:
      - make_testbed

      - test_zones:
          requires:
            - make_testbed
          pre-steps:
            - *restore_cache
            - *attach_workspace
          post-steps:
            - *persist_to_workspace
            - *store_artifacts

      - test_devices:
          requires:
            - make_testbed
          pre-steps:
            - *restore_cache 
            - *attach_workspace
          post-steps:
            - *persist_to_workspace
            - *store_artifacts

      - test_issues:
          requires:
            - make_testbed
          pre-steps:
            - *restore_cache 
            - *attach_workspace
          post-steps:
            - *persist_to_workspace
            - *store_artifacts

  # build-and-deploy:
  #   jobs:
  #     - build:
  #         filters: # required since `deploy` has tag filters AND requires `build`
  #           tags:
  #             only: /.*/
  #     - test:
  #         requires:
  #           - build
  #         filters: # required since `deploy` has tag filters AND requires `build`
  #           tags:
  #             only: /.*/
  #     - deploy:
  #         requires:
  #           - build
  #           - test
  #         filters:
  #           tags:
  #             only: /[0-9]+(\.[0-9]+)*/
  #           branches:
  #             ignore: /.*/