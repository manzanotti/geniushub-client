# geniushub-client - Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

aliases:
  - &testbed_environment
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/working_directory

    environment:
      TEST_RESULTS: /tmp/workspace/test-results

  - &restore_cache
      restore_cache:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}

  - &save_cache
      save_cache:
        key: v4-dependencies-{{ checksum "requirements.txt" }}
        paths:
          - ./venv

  - &attach_workspace
      attach_workspace:
        at: /tmp/workspace

  - &persist_to_workspace
      persist_to_workspace:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}
        root: /tmp/workspace
        paths:
          - test-results

  - &store_artifacts
      store_artifacts:
        path: /tmp/workspace/test-results
        destination: test_results

  - &create_testbed
      - checkout

      - *restore_cache

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip  # setuptools wheel
            pip install -r requirements.txt

      - *save_cache

      - run: mkdir -p ${TEST_RESULTS}/issues
      - run: mkdir -p ${TEST_RESULTS}/devices
      - run: mkdir -p ${TEST_RESULTS}/zones

      - *persist_to_workspace


commands:
  get_curl_command:
    description: "get via curl using v1 api"
    parameters:
      test_type:
          type: string
    steps:
      - *attach_workspace
      - run:
          name: cURL v1/issues
          no_output_timeout: 330
          command: |
            curl -X GET https://my.geniushub.co.uk/v1/<< parameters.test_type >> -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/curl.json
      - *persist_to_workspace


jobs:
  make_testbed:
    <<: *testbed_environment
    steps: *create_testbed

  get_curl:
    <<: *testbed_environment
    steps:
      - get_curl_command:
          test_type: "issue"

  get_v3:
    <<: *testbed_environment
    parameters:
      test_type:
          type: string
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache
      - run:
          name: ghclient v3/issues
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} << parameters.test_type >> -v | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v3.json
      - *persist_to_workspace

  get_v1:
    <<: *testbed_environment
    parameters:
      test_type:
          type: string
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache
      - run:
          name: ghclient v1/issues
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_TOKEN} << parameters.test_type >> -v | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/v1.json
      - *persist_to_workspace

  issues_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL issues prep
          no_output_timeout: 60
          command: |
            . venv/bin/activate
            cat ${TEST_RESULTS}/<< parameters.test_type >>/curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/<< parameters.test_type >>/curl.json

      - run:
          name: Diff v1/issues
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/v1.json | \
              tee -a ${TEST_RESULTS}/<< parameters.test_type >>/results.txt

      - run:
          name: Diff v1/issues display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/v1.json | colordiff

      - run:
          name: Diff v3/issues
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/v3.json | \
              tee -a ${TEST_RESULTS}/<< parameters.test_type >>/results.txt

      - run:
          name: Diff v3/issues display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/<< parameters.test_type >>/curl.json ${TEST_RESULTS}/<< parameters.test_type >>/v3.json | colordiff

      - *store_artifacts

  zones_curl:
    <<: *testbed_environment
    steps:
      - *attach_workspace
      - run:
          name: cURL v1/zones
          no_output_timeout: 330
          command: |
            curl -X GET https://my.geniushub.co.uk/v1/zones -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/zones/curl.json
      - *persist_to_workspace

  zones_v3:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v3/zones
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} zones -v | tee ${TEST_RESULTS}/zones/v3.json

      - *persist_to_workspace

  zones_v1:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v1/zones
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_TOKEN} zones -v | tee ${TEST_RESULTS}/zones/v1.json

      - *persist_to_workspace

  zones_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL zones prep
          no_output_timeout: 60
          command: |
            . venv/bin/activate
            cat ${TEST_RESULTS}/zones/curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/zones/curl.json

      - run:
          name: Diff v1/zones
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/zones/curl.json ${TEST_RESULTS}/zones/v1.json | tee -a ${TEST_RESULTS}/zones/results.txt

      - run:
          name: Diff v1/zones display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/zones/curl.json ${TEST_RESULTS}/zones/v1.json | colordiff

      - run:
          name: Diff v3/zones
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/zones/curl.json ${TEST_RESULTS}/zones/v3.json | tee -a ${TEST_RESULTS}/zones/results.txt

      - run:
          name: Diff v3/zones display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/zones/curl.json ${TEST_RESULTS}/zones/v3.json | colordiff

      - *store_artifacts

  devices_curl:
    <<: *testbed_environment
    steps:
      - *attach_workspace
      - run:
          name: cURL v1/devices
          no_output_timeout: 330
          command: |
            curl -X GET https://my.geniushub.co.uk/v1/devices -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/devices/curl.json
      - *persist_to_workspace

  devices_v3:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v3/devices
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} devices -v | tee ${TEST_RESULTS}/devices/v3.json

      - *persist_to_workspace

  devices_v1:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v1/devices
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_TOKEN} devices -v | tee ${TEST_RESULTS}/devices/v1.json

      - *persist_to_workspace

  devices_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL devices prep
          no_output_timeout: 60
          command: |
            . venv/bin/activate
            cat ${TEST_RESULTS}/devices/curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/devices/curl.json

      - run:
          name: Diff v1/devices
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/devices/curl.json ${TEST_RESULTS}/devices/v1.json | tee -a ${TEST_RESULTS}/devices/results.txt

      - run:
          name: Diff v1/devices display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/devices/curl.json ${TEST_RESULTS}/devices/v1.json | colordiff

      - run:
          name: Diff v3/devices
          no_output_timeout: 60
          command: |
            diff -qs ${TEST_RESULTS}/devices/curl.json ${TEST_RESULTS}/devices/v3.json | tee -a ${TEST_RESULTS}/devices/results.txt

      - run:
          name: Diff v3/devices display
          no_output_timeout: 60
          when: on_fail
          command: |
            sudo apt -y install wdiff colordiff >/dev/null 2>&1
            wdiff ${TEST_RESULTS}/devices/curl.json ${TEST_RESULTS}/devices/v3.json | colordiff

      - *store_artifacts

workflows:
  version: 2.1
  test_output:
    jobs:
      - make_testbed

      - get_curl:
          test_type: "issues"
          requires:
            - make_testbed
      - get_v1:
          test_type: "issues"
          requires:
            - make_testbed
      - get_v3:
          test_type: "issues"
          requires:
            - make_testbed
      - issues_diff:
          test_type: "issues"
          requires:
            - get_curl
            - get_v1
            - get_v3

      - zones_curl:
          requires:
            - make_testbed
      - zones_v1:
          requires:
            - make_testbed
      - zones_v3:
          requires:
            - make_testbed
      - zones_diff:
          requires:
            - zones_curl
            - zones_v1
            - zones_v3

      - devices_curl:
          requires:
            - make_testbed
      - devices_v1:
          requires:
            - make_testbed
      - devices_v3:
          requires:
            - make_testbed
      - devices_diff:
          requires:
            - devices_curl
            - devices_v1
            - devices_v3
