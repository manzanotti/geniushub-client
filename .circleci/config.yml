# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

aliases:
  - &testbed_environment
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/working_directory

    environment:
      TEST_RESULTS: /tmp/workspace/test-results

  - &restore_cache
      restore_cache:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}

  - &save_cache
      save_cache:
        key: v4-dependencies-{{ checksum "requirements.txt" }}
        paths:
          - ./venv

  - &attach_workspace
      attach_workspace:
        at: /tmp/workspace

  - &persist_to_workspace
      persist_to_workspace:
        keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}
        root: /tmp/workspace
        paths:
          - test-results

  - &store_artifacts
      store_artifacts:
        path: /tmp/workspace/test-results
        destination: test_results

  - &create_testbed
      - checkout

      - *restore_cache

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip  # setuptools wheel
            pip install -r requirements.txt

      - *save_cache

      - run: mkdir -p $TEST_RESULTS

      - *persist_to_workspace

jobs:
  make_testbed:
    <<: *testbed_environment
    steps: *create_testbed

  issues_curl:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL v1/issues
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/issues -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/issues_curl.json
            cat ${TEST_RESULTS}/issues_curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/issues_curl.json

      - *persist_to_workspace
      - *store_artifacts

  issues_app_v3:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v3/issues
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} issues -v | tee ${TEST_RESULTS}/issues_v3.json

      - *persist_to_workspace
      - *store_artifacts

  issues_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: Diff issues
          no_output_timeout: 30
          command: |
            echo diff -s ${TEST_RESULTS}/issues_curl.json ${TEST_RESULTS}/issues_v3.json | tee -a ${TEST_RESULTS}/issues-results.txt
                 diff -s ${TEST_RESULTS}/issues_curl.json ${TEST_RESULTS}/issues_v3.json | tee -a ${TEST_RESULTS}/issues-results.txt
            echo                                                                         | tee -a ${TEST_RESULTS}/issues-results.txt

      - *persist_to_workspace
      - *store_artifacts

  zones_curl:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL v1/zones
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/zones -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/zones_curl.json
            cat ${TEST_RESULTS}/zones_curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/zones_curl.json

      - *persist_to_workspace
      - *store_artifacts

  zones_app_v3:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v3/zones
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} zones -v | tee ${TEST_RESULTS}/issues_v3.json

      - *persist_to_workspace
      - *store_artifacts

  zones_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: Diff zones
          no_output_timeout: 30
          command: |
            echo diff -s ${TEST_RESULTS}/zones_curl.json ${TEST_RESULTS}/zones_v3.json | tee -a ${TEST_RESULTS}/zones-results.txt
                 diff -s ${TEST_RESULTS}/zones_curl.json ${TEST_RESULTS}/zones_v3.json | tee -a ${TEST_RESULTS}/zones-results.txt
            echo                                                                       | tee -a ${TEST_RESULTS}/zones-results.txt

      - *persist_to_workspace
      - *store_artifacts

  devices_curl:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: cURL v1/devices
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/devices -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              tee ${TEST_RESULTS}/devices_curl.json
            cat ${TEST_RESULTS}/devices_curl.json | python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/devices_curl.json

      - *persist_to_workspace
      - *store_artifacts

  devices_app_v3:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: ghclient v3/devices
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} devices -v | tee ${TEST_RESULTS}/issues_v3.json

      - *persist_to_workspace
      - *store_artifacts

  devices_diff:
    <<: *testbed_environment
    steps:
      - checkout
      - *attach_workspace
      - *restore_cache

      - run:
          name: Diff devices
          no_output_timeout: 30
          command: |
            echo diff -s ${TEST_RESULTS}/devices_curl.json ${TEST_RESULTS}/devices_v3.json | tee -a ${TEST_RESULTS}/devices-results.txt
                 diff -s ${TEST_RESULTS}/devices_curl.json ${TEST_RESULTS}/devices_v3.json | tee -a ${TEST_RESULTS}/devices-results.txt
            echo                                                                           | tee -a ${TEST_RESULTS}/devices-results.txt

      - *persist_to_workspace
      - *store_artifacts

workflows:
  version: 2
  test_output:
    jobs:
      - make_testbed
      - issues_curl:
          requires:
            - make_testbed
      - issues_app_v3:
          requires:
            - make_testbed
      - issues_diff:
          requires:
            - issues_curl
            - issues_app_v3

      - zones_curl:
          requires:
            - make_testbed
      - zones_app_v3:
          requires:
            - make_testbed
      - issues_diff:
          requires:
            - zones_curl
            - zones_app_v3


      - devices_curl:
          requires:
            - make_testbed
      - devices_app_v3:
          requires:
            - make_testbed
      - issues_diff:
          requires:
            - devices_curl
            - devices_app_v3
