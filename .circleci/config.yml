# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

aliases:
  - &test_environment
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/working_directory

    environment:
      TEST_RESULTS: /tmp/test-results

  - &attach_workspace
      attach_workspace:
        at: ~/workspace

  - &dependencies
      - checkout

      - *attach_workspace

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pwd
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: list folders 1
          command: |
            ls
            ls ~
            ls $TEST_RESULTS
            ls $TEST_RESULTS/..

      - run:
          name: list folders 1
          command: |
            ls ..
            ls ../repo
            ls ../workspace
            ls ../working_directory

      - persist_to_workspace:
          root: .
          paths:
              - working_directory

      - run: ls
      - run: ls ~
      - run: ls $TEST_RESULTS
      - run: ls $TEST_RESULTS/..

      - run: ls ..
      - run: ls ../repo
      - run: ls ../workspace
      - run: ls ../working_directory

jobs:
  dependencies:
    <<: *test_environment
    steps: *dependencies

  test_issues:
    <<: *test_environment
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Run tests
      - run: mkdir -p $TEST_RESULTS

      - run:
          name: cURL v1/Issues
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/issues -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              python -c "import sys, json; print(json.load(sys.stdin))" | tee ${TEST_RESULTS}/issues_curl.json

      # - run:
      #     name: ghclient v1/Issues
      #     no_output_timeout: 330
      #     command: |
      #       . venv/bin/activate
      #       python ghclient.py ${HUB_TOKEN} issues -v | tee ${TEST_RESULTS}/issues_v1.json

      # - run:
      #     name: Diff Issues v1 Vs cURL
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/issues_v1.json ${TEST_RESULTS}/issues_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/issues_v1.json ${TEST_RESULTS}/issues_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                         | tee -a ${TEST_RESULTS}/test-results.txt

      - run:
          name: ghclient v3/Issues
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} issues -v | tee ${TEST_RESULTS}/issues_v3.json

      # - run:
      #     name: Diff Issues v1 Vs v3
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/issues_v1.json ${TEST_RESULTS}/issues_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/issues_v1.json ${TEST_RESULTS}/issues_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                       | tee -a ${TEST_RESULTS}/test-results.txt

      - store_artifacts:
          path: /tmp/test-results
          destination: devices_summary

  test_devices:
    <<: *test_environment
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Run tests!
      - run: mkdir -p $TEST_RESULTS

      - run:
          name: cURL v1/Devices
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/devices -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              python -c "import sys, json; print(json.load(sys.stdin))" | tee ${TEST_RESULTS}/devices_curl.json

      # - run:
      #     name: ghclient v1/Devices
      #     no_output_timeout: 330
      #     command: |
      #       . venv/bin/activate
      #       python ghclient.py ${HUB_TOKEN} devices -v | tee ${TEST_RESULTS}/devices_v1.json

      # - run:
      #     name: Diff Devices v1 Vs cURL
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/devices_v1.json ${TEST_RESULTS}/devices_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/devices_v1.json ${TEST_RESULTS}/devices_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                           | tee -a ${TEST_RESULTS}/test-results.txt

      - run:
          name: ghclient v3/Devices
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} devices -v | sed -e s/\"/\'/g | tee ${TEST_RESULTS}/devices_v3.json

      # - run:
      #     name: Diff Devices v1 Vs v3
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/devices_v1.json ${TEST_RESULTS}/devices_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/devices_v1.json ${TEST_RESULTS}/devices_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                         | tee -a ${TEST_RESULTS}/test-results.txt

      - store_artifacts:
          path: /tmp/test-results
          destination: devices_summary

  test_zones:
    <<: *test_environment
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Run tests!
      - run: mkdir -p $TEST_RESULTS

      - run:
          name: cURL v1/Zones
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/zones -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              python -c "import sys, json; print(json.load(sys.stdin))" | tee ${TEST_RESULTS}/zones_curl.json

      # - run:
      #     name: ghclient v1/Zones
      #     no_output_timeout: 330
      #     command: |
      #       . venv/bin/activate
      #       python ghclient.py ${HUB_TOKEN} zones -v | tee ${TEST_RESULTS}/zones_v1.json

      # - run:
      #     name: Diff Zones v1 Vs cURL
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/zones_v1.json ${TEST_RESULTS}/zones_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/zones_v1.json ${TEST_RESULTS}/zones_curl.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                       | tee -a ${TEST_RESULTS}/test-results.txt

      - run:
          name: ghclient v3/Zones
          no_output_timeout: 120
          command: |
            . venv/bin/activate
            python ghclient.py ${HUB_ADDRESS} -u ${USERNAME} -p ${PASSWORD} zones -v | tee ${TEST_RESULTS}/zones_v3.json

      # - run:
      #     name: Diff Zones v1 Vs v3
      #     no_output_timeout: 30
      #     command: |
      #       echo diff -s ${TEST_RESULTS}/zones_v1.json ${TEST_RESULTS}/zones_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #            diff -s ${TEST_RESULTS}/zones_v1.json ${TEST_RESULTS}/zones_v3.json | tee -a ${TEST_RESULTS}/test-results.txt
      #       echo                                                                     | tee -a ${TEST_RESULTS}/test-results.txt

      - store_artifacts:
          path: /tmp/test-results
          destination: devices_summary

  issues_curl:
    <<: *test_environment
    steps:
      - run:
          name: cURL v1/Issues
          no_output_timeout: 330
          command: |
            . venv/bin/activate
            curl -X GET https://my.geniushub.co.uk/v1/issues -H "authorization: Bearer ${HUB_TOKEN}" --connect-timeout 300 | \
              python -c "import sys, json; print(json.load(sys.stdin))" | tee ${TEST_RESULTS}/issues_curl.json

      - store_artifacts:
          path: /tmp/test-results
          destination: devices_summary

workflows:
  version: 2
  test_output:
    jobs:
      - dependencies
      - issues_curl:
          requires:
            - dependencies
      - test_issues:
          requires:
            - dependencies
            - issues_curl
      - test_devices:
          requires:
            - dependencies
            - issues_curl
      - test_zones:
          requires:
            - dependencies
            - issues_curl
